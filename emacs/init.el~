;; Custom Vars
(defvar emacs-home "~/.emacs.d")
(add-to-list 'load-path emacs-home)

;; Custom Functions
(defun find-user-init-file ()
	(interactive)
  (find-file user-init-file))

(defun  switch-to-previous-buffer ()
	(interactive)
	(switch-to-buffer (other-buffer (current-buffer) 1)))

(require 'package)
(add-to-list 'package-archives
						 '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives
						 '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives
             '("org" . "http://orgmode.org/elpa/"))

(setq jpk-packages
			'(
				auto-complete
				coffee-mode
				evil
				evil-indent-textobject
				evil-leader
				evil-nerd-commenter
				evil-numbers
				evil-tabs
				fiplr
				flymake-ruby
				haml-mode
				inf-ruby
				jabber
				jade-mode
				js2-mode
				less-css-mode
				magit
				rainbow-mode
				rhtml-mode
				rinari
				rspec-mode
				ruby-electric
				ruby-end
				ruby-has-syntax
				sass-mode
				sws-mode
				web-mode
				yari
				yasnippet
				zenburn
				))

(when (not package-archive-contents)
	(package-refresh-contents))

(dolist (pkg jpk-packages)
	(when (and (not (package-installed-p pkg))
						 (assoc pkg package-archive-contents))
		(package-install pkg)))

(defun package-list-unaccounted-packages ()
  "Like `package-list-packages', but shows only the packages that
  are installed and are not in `jpk-packages'.  Useful for
  cleaning out unwanted packages."
  (interactive)
  (package-show-package-list
   (remove-if-not (lambda (x) (and (not (memq x jpk-packages))
																	 (not (package-built-in-p x))
																	 (package-installed-p x)))
                  (mapcar 'car package-archive-contents))))

;; load all extensions recursively
(let ((default-directory "~/.emacs.d/extensions/"))
  (normal-top-level-add-to-load-path '("."))
  (normal-top-level-add-subdirs-to-load-path))

;; load Org-mode from source when the ORG_HOME environment variable is set
(when (getenv "ORG_HOME")
  (let ((org-lisp-dir (expand-file-name "lisp" (getenv "ORG_HOME"))))
    (when (file-directory-p org-lisp-dir)
      (add-to-list 'load-path org-lisp-dir)
      (require 'org))))

;; load Evil
(add-hook 'after-init-hook
  (lambda ()
    (require 'evil)
		(require 'surround)
		(require 'evil-tabs)
		(require 'evil-rails)
		(require 'evil-leader)
		(require 'evil-numbers)
		(require 'evil-indent-textobject)
		(global-evil-leader-mode)
		(global-surround-mode 1)
		(evilnc-default-hotkeys)
		(evil-mode 1)))

;; load railscasts-theme
(require 'railscasts-theme)

;; Global Settings
(tool-bar-mode -1)
(show-paren-mode 1)(setq show-paren-delay 0)
(global-linum-mode 1)
(scroll-bar-mode -1)
(tooltip-mode -1)
(blink-cursor-mode t)
(column-number-mode t)
(setq-default tab-width 2)
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq inhibit-startup-message t)
(put 'narrow-to-region 'disabled nil)

;; Org Settings
(require 'init-js)
(require 'init-css)
(require 'init-ido)
(require 'init-org)
(require 'init-ruby)
(require 'init-global-keys)
